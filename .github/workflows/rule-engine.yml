name: rule-engine rust


on:
  workflow_dispatch:
    inputs:
      osName:
        description: '编译系统'
        required: true
        default: 'windows'
        type: choice
        options:
          - windows
          - ubuntu
          - macos
      rustChannel:
        description: 'rust通道'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - nightly

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTUP_MAX_RETRIES: 10

jobs:
  windows-build:
    name: windows-${{ matrix.arch }} ${{ inputs.rustChannel }} build
    if: ${{ inputs.osName == 'windows'}}
    strategy:
      fail-fast: true
      matrix:
        arch:
          - x86_64
    runs-on: ${{ inputs.osName }}-latest
    permissions:
      contents: read
      packages: write
    environment: rule-engine
    steps:
      - uses: actions/checkout@v3
        name: checkout code
      - name: Install Rust
        run: |
          rustup update ${{ inputs.rustChannel }}
          rustup default ${{ inputs.rustChannel }}
      - name: Install Ossutil
        # You may pin to the exact commit or the version.
        # uses: manyuanrong/setup-ossutil@b74103470b3890349167a84773d33158511cf11d
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: oss-cn-shenzhen.aliyuncs.com
          access-key-id: ${{ secrets.ACCESS_KEY }}
          access-key-secret: ${{ secrets.SECRET_KEY }}
          ossutil-version: '1.7.16'
      - name: rust build
        run: |
          echo $PWD 
          cd boot-extension/rule-engine
          echo $PWD
          rustup target add ${{ matrix.arch }}-pc-windows-msvc 
          cargo build --release --target ${{ matrix.arch }}-pc-windows-msvc
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
      - name: Copy
        run: |
          cd boot-extension/rule-engine
          cp  ./target/${{ matrix.arch }}-pc-windows-msvc/release/zen_engine.dll ./src/main/resources/zen_engine-windows-${{ matrix.arch }}.dll
      - name: Upload
        run: |
          cd boot-extension/rule-engine
          ossutil cp ./src/main/resources/zen_engine-windows-${{ matrix.arch }}.dll oss://workoss/static/${{ inputs.rustChannel }}/zen_engine-windows-${{ matrix.arch }}.dll

  ubuntu-build:
    name: linux-${{ matrix.arch }} ${{ inputs.rustChannel }} build
    if: ${{ inputs.osName == 'ubuntu'}}
    strategy:
      fail-fast: true
      matrix:
        arch:
          - x86_64
#          - aarch64
    runs-on: ${{ inputs.osName }}-latest
    permissions:
      contents: read
      packages: write
    environment: rule-engine
    steps:
      - uses: actions/checkout@v3
        name: checkout code
      - name: Install Rust
        run: |
          rustup update ${{ inputs.rustChannel }}
          rustup default ${{ inputs.rustChannel }}
      - name: Install Ossutil
        # You may pin to the exact commit or the version.
        # uses: manyuanrong/setup-ossutil@b74103470b3890349167a84773d33158511cf11d
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: oss-cn-shenzhen.aliyuncs.com
          access-key-id: ${{ secrets.ACCESS_KEY }}
          access-key-secret: ${{ secrets.SECRET_KEY }}
          ossutil-version: '1.7.16'
      - name: rust build
        run: |
          echo $PWD 
          cd boot-extension/rule-engine
          echo $PWD
          rustup target add ${{ matrix.arch }}-unknown-linux-gnu
          cargo build --release --target ${{ matrix.arch }}-unknown-linux-gnu
      - name: Copy
        run: |
          cd boot-extension/rule-engine
          cp -f target/${{ matrix.arch }}-unknown-linux-gnu/release/libzen_engine.so ./src/main/resources/libzen_engine-linux-${{ matrix.arch }}.so
      - name: Upload
        run: |
          cd boot-extension/rule-engine
          ossutil cp ./src/main/resources/libzen_engine-linux-${{ matrix.arch }}.so oss://workoss/static/${{ inputs.rustChannel }}/libzen_engine-linux-${{ matrix.arch }}.so
     
  macos-build:
    name: osx-${{ matrix.arch }} ${{ inputs.rustChannel }} build
    if: ${{ inputs.osName == 'macos'}}
    strategy:
      fail-fast: true
      matrix:
        arch:
          - x86_64
          - aarch64
    runs-on: ${{ inputs.osName }}-latest
    permissions:
      contents: read
      packages: write
    environment: rule-engine
    steps:
      - uses: actions/checkout@v3
        name: checkout code
      - name: Install Rust
        run: |
          rustup update ${{ inputs.rustChannel }}
          rustup default ${{ inputs.rustChannel }}
      - name: Install Ossutil
        # You may pin to the exact commit or the version.
        # uses: manyuanrong/setup-ossutil@b74103470b3890349167a84773d33158511cf11d
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: oss-cn-shenzhen.aliyuncs.com
          access-key-id: ${{ secrets.ACCESS_KEY }}
          access-key-secret: ${{ secrets.SECRET_KEY }}
          ossutil-version: '1.7.16'
      - name: rust build
        run: |
          echo $PWD 
          cd boot-extension/rule-engine
          echo $PWD
          rustup target add ${{ matrix.arch }}-apple-darwin
          cargo build --release --target ${{ matrix.arch }}-apple-darwin
      - name: Copy
        run: |
          cd boot-extension/rule-engine
          cp -f target/${{ matrix.arch }}-apple-darwin/release/libzen_engine.dylib ./src/main/resources/libzen_engine-osx-${{ matrix.arch }}.dylib
      - name: Upload
        run: |
          cd boot-extension/rule-engine
          ossutil cp ./src/main/resources/libzen_engine-osx-${{ matrix.arch }}.dylib oss://workoss/static/${{ inputs.rustChannel }}/libzen_engine-osx-${{ matrix.arch }}.dylib              
